From 901b568f1b7c479af250d5b7727cd22aeb2f2f29 Mon Sep 17 00:00:00 2001
From: "Ying Ruei Liang (KK)" <thumbd03803@gmail.com>
Date: Tue, 1 Sep 2015 09:00:01 +0800
Subject: [PATCH] Add port and test for SDL2_ttf

---
 AUTHORS                 |   2 +-
 embuilder.py            |   3 +++
 src/settings.js         |   1 +
 tests/sdl2_ttf.c        |  42 ++++++++++++++++++++++++++++++++++++++++++
 tests/sdl2_ttf.png      | Bin 0 -> 8057 bytes
 tests/test_browser.py   |   6 ++++++
 tests/test_sanity.py    |   1 +
 tools/ports/__init__.py |   4 ++--
 tools/ports/sdl_ttf.py  |  48 ++++++++++++++++++++++++++++++++++++++++++++++++
 9 files changed, 104 insertions(+), 3 deletions(-)
 create mode 100644 tests/sdl2_ttf.c
 create mode 100644 tests/sdl2_ttf.png
 create mode 100644 tools/ports/sdl_ttf.py

+* Ying-Ruei Liang <thumbd03803@gmail.com>
diff --git a/embuilder.py b/embuilder.py
index 8e7280b..9a04776 100755
--- a/embuilder.py
+++ b/embuilder.py
@@ -41,6 +41,7 @@
         ogg
         sdl2
         sdl2-image
+        sdl2-ttf
         vorbis
         zlib
 
@@ -151,6 +152,8 @@ def build_port(port_name, lib_name, params):
       build_port('sdl2-image', 'libsdl2_image.bc', ['-s', 'USE_SDL=2', '-s', 'USE_SDL_IMAGE=2'])
     elif what == 'freetype':
       build_port('freetype', 'libfreetype.a', ['-s', 'USE_FREETYPE=1'])
+    elif what == 'sdl2-ttf':
+      build_port('sdl2-ttf', 'libsdl2_ttf.bc', ['-s', 'USE_SDL=2', '-s', 'USE_SDL_TTF=2', '-s', 'USE_FREETYPE=1'])
     else:
       shared.logging.error('unfamiliar build target: ' + what)
       sys.exit(1)
diff --git a/src/settings.js b/src/settings.js
index 068852f..0a17872 100644
--- a/src/settings.js
+++ b/src/settings.js
@@ -568,6 +568,7 @@ var USE_SDL = 1; // Specify the SDL version that is being linked against.
                  // 1, the default, is 1.3, which is implemented in JS
                  // 2 is a port of the SDL C code on emscripten-ports
 var USE_SDL_IMAGE = 1; // Specify the SDL_image version that is being linked against. Must match USE_SDL
+var USE_SDL_TTF = 1; // Specify the SDL_ttf version that is being linked against. Must match USE_SDL
 var USE_ZLIB = 0; // 1 = use zlib from emscripten-ports
 var USE_LIBPNG = 0; // 1 = use libpng from emscripten-ports
 var USE_BULLET = 0; // 1 = use bullet from emscripten-ports
diff --git a/tests/sdl2_ttf.c b/tests/sdl2_ttf.c
new file mode 100644
index 0000000..a8e6aec
--- /dev/null
+++ b/tests/sdl2_ttf.c
@@ -0,0 +1,42 @@
+#include <stdio.h>
+#include <SDL.h>
+#include <SDL_ttf.h>
+#include <emscripten.h>
+
+SDL_Window *window;
+SDL_Renderer *renderer;
+TTF_Font *font;
+
+void frame()
+{
+    static SDL_Color colorA = { 0xff, 0x99, 0x00, 0xff };
+    static SDL_Color colorB = { 0x11, 0xff, 0xff, 0xff };
+    static SDL_Rect upperRect = {0, 0, 600, 200};
+    static SDL_Rect lowerRect = {0, 200, 600, 200};
+
+    SDL_Surface *helloSurface = TTF_RenderText_Shaded(font, "hello", colorA, colorB);
+    SDL_Surface *worldSurface = TTF_RenderText_Shaded(font, "world", colorB, colorA);
+    SDL_Texture *helloTexture = SDL_CreateTextureFromSurface(renderer, helloSurface);
+    SDL_Texture *worldTexture = SDL_CreateTextureFromSurface(renderer, worldSurface);
+
+    SDL_SetRenderDrawColor(renderer, 0xcc, 0xcc, 0xcc, 0xff);
+    SDL_RenderClear(renderer);
+    SDL_RenderCopy(renderer, helloTexture, NULL, &upperRect);
+    SDL_RenderCopy(renderer, worldTexture, NULL, &lowerRect);
+    SDL_RenderPresent(renderer);
+
+    SDL_FreeSurface(helloSurface);
+    SDL_FreeSurface(worldSurface);
+    SDL_DestroyTexture(helloTexture);
+    SDL_DestroyTexture(worldTexture);
+}
+
+int main()
+{
+    SDL_Init(SDL_INIT_VIDEO);
+    TTF_Init();
+    window = SDL_CreateWindow("test", 0, 0, 640, 480, SDL_WINDOW_SHOWN);
+    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
+    font = TTF_OpenFont("LiberationSansBold.ttf", 40);
+    emscripten_set_main_loop(frame, -1, 1);
+}
diff --git a/tests/test_browser.py b/tests/test_browser.py
index 6506bfd..f116599 100644
--- a/tests/test_browser.py
+++ b/tests/test_browser.py
@@ -2457,6 +2457,12 @@ def post_build(*args):
       open('test.html', 'w').write(html2)
     self.btest('sdl2_gl_frames_swap.c', reference='sdl2_gl_frames_swap.png', args=['--proxy-to-worker', '-s', 'GL_TESTING=1', '-s', 'USE_SDL=2'], manual_reference=True, post_build=post_build)
 
+  def test_sdl2_ttf(self):
+    shutil.copy2(path_from_root('tests', 'freetype', 'LiberationSansBold.ttf'), self.get_dir())
+    self.btest('sdl2_ttf.c', reference='sdl2_ttf.png',
+      args=['-O2', '-s', 'USE_SDL=2', '-s', 'USE_SDL_TTF=2', '--embed-file', 'LiberationSansBold.ttf'],
+      message='You should see colorful "hello" and "world" in the window')
+
   def test_emterpreter_async(self):
     for opts in [0, 1, 2, 3]:
       print opts
diff --git a/tests/test_sanity.py b/tests/test_sanity.py
index 958820d..7aa8435 100644
--- a/tests/test_sanity.py
+++ b/tests/test_sanity.py
@@ -690,6 +690,7 @@ def test_embuilder(self):
       ([PYTHON, 'embuilder.py', 'build', 'sdl2'], ['success'], True, [os.path.join('ports-builds', 'sdl2', 'libsdl2.bc')]),
       ([PYTHON, 'embuilder.py', 'build', 'sdl2-image'], ['success'], True, [os.path.join('ports-builds', 'sdl2-image', 'libsdl2_image.bc')]),
       ([PYTHON, 'embuilder.py', 'build', 'freetype'], ['building and verifying freetype', 'success'], True, [os.path.join('ports-builds', 'freetype', 'libfreetype.a')]),
+      ([PYTHON, 'embuilder.py', 'build', 'sdl2-ttf'], ['building and verifying sdl2-ttf', 'success'], True, [os.path.join('ports-builds', 'sdl2-ttf', 'libsdl2_ttf.bc')]),
     ]:
       print command
       Cache.erase()
diff --git a/tools/ports/__init__.py b/tools/ports/__init__.py
index 7333e81..13fa135 100644
--- a/tools/ports/__init__.py
+++ b/tools/ports/__init__.py
@@ -1,4 +1,4 @@
-import bullet, freetype, libpng, ogg, sdl, sdl_image, vorbis, zlib
+import bullet, freetype, libpng, ogg, sdl, sdl_image, sdl_ttf, vorbis, zlib
 
 # If port A depends on port B, then A should be _after_ B
-ports = [zlib, libpng, sdl, sdl_image, ogg, vorbis, bullet, freetype]
+ports = [zlib, libpng, sdl, sdl_image, ogg, vorbis, bullet, freetype, sdl_ttf]
diff --git a/tools/ports/sdl_ttf.py b/tools/ports/sdl_ttf.py
new file mode 100644
index 0000000..53b0e29
--- /dev/null
+++ b/tools/ports/sdl_ttf.py
@@ -0,0 +1,48 @@
+import os, shutil, logging
+
+TAG = 'version_1'
+
+def get(ports, settings, shared):
+  if settings.USE_SDL_TTF == 2:
+    ports.fetch_project('sdl2-ttf', 'https://github.com/emscripten-ports/SDL2_ttf/archive/' + TAG + '.zip', 'SDL2_ttf-' + TAG)
+    def create():
+      sdl_ttf_h = os.path.join(ports.get_dir(), 'sdl2-ttf', 'SDL2_ttf-' + TAG, 'SDL_ttf.h')
+      build_inc_path = os.path.join(ports.get_build_dir(), 'include')
+      build_inc_sdl2_path = os.path.join(ports.get_build_dir(), 'sdl2', 'include')
+
+      shutil.copy2(sdl_ttf_h, build_inc_path)
+      shutil.copy2(sdl_ttf_h, build_inc_sdl2_path)
+
+      srcs = ['SDL_ttf.c']
+      commands = []
+      o_s = []
+
+      for src in srcs:
+        o = os.path.join(ports.get_build_dir(), 'sdl2-ttf', src + '.o')
+        command = [shared.PYTHON, shared.EMCC]
+        command += [os.path.join(ports.get_dir(), 'sdl2-ttf', 'SDL2_ttf-' + TAG, src)]
+        command += ['-O2', '-s', 'USE_SDL=2', '-s', 'USE_FREETYPE=1', '-o', o, '-w']
+        commands.append(command)
+        o_s.append(o)
+
+      shared.safe_ensure_dirs(os.path.dirname(o_s[0]))
+      ports.run_commands(commands)
+      final = os.path.join(ports.get_build_dir(), 'sdl2-ttf', 'libsdl2_ttf.bc')
+      shared.Building.link(o_s, final)
+      return final
+    return [shared.Cache.get('sdl2-ttf', create, what='port')]
+  else:
+    return []
+
+def process_dependencies(settings):
+  if settings.USE_SDL_TTF == 2:
+    settings.USE_SDL = 2
+    settings.USE_FREETYPE = 1
+
+def process_args(ports, args, settings, shared):
+  if settings.USE_SDL_TTF == 2:
+    get(ports, settings, shared)
+  return args
+
+def show():
+  return 'SDL2_ttf (USE_SDL_TTF=2; zlib license)'
